import os

import click
import jinja2

from docker_etl.file_utils import (
    CI_JOB_NAME,
    CI_WORKFLOW_NAME,
    ROOT_DIR,
    find_file_in_jobs,
)

CI_DIR = os.path.join(ROOT_DIR, ".circleci")
CI_CONFIG_TEMPLATE = "config.template.yml"

CI_CONFIG_HEADER = """###
# This config.yml was generated by data-etl/ci_config.py.  
# Changes should be made to templates/config.template.yml and re-generated. 
###"""


def read_file(file_path: str) -> str:
    """Read file contents and return as a string."""
    with open(file_path) as f:
        return f.read()


def update_config(dry_run: bool = False) -> str:
    """Collect job and workflow configs per job and create new config."""
    template_loader = jinja2.FileSystemLoader(CI_DIR)
    template_env = jinja2.Environment(loader=template_loader)
    config_template = template_env.get_template("config.template.yml")

    job_configs = sorted(find_file_in_jobs(CI_JOB_NAME))
    workflow_configs = sorted(find_file_in_jobs(CI_WORKFLOW_NAME))

    config_text = config_template.render(
        config_header=CI_CONFIG_HEADER,
        jobs="\n\n".join([read_file(file_path) for file_path in job_configs]),
        workflows="\n\n".join([read_file(file_path) for file_path in workflow_configs]),
    )

    if dry_run:
        print(config_text)
    else:
        with open(os.path.join(ROOT_DIR, ".circleci", "config.yml"), "w") as f:
            f.write(config_text)

    return config_text


@click.command()
@click.option(
    "--dry-run/--no-dry-run",
    default=False,
    help="Dry run will print to stdout instead of overwriting config.yml",
)
def main(dry_run: bool):
    update_config(dry_run)


if __name__ == "__main__":
    main()
